const o=`<mt-card class="swag-paypal-method-card sw-card--grid" position-identifier="swag-paypal-method-card" > <template #avatar> <img :src="assetFilter('swagpaypal/administration/static/img/paypal-logo-avatar.svg')" :alt="$t('swag-paypal-method.appImageAlt')" > </template> <template #title> <div class="swag-paypal-method-card__title"> <p> {{ $t('swag-paypal-method.cardTitle') }} </p> <sw-label v-if="!merchantInformationStore.isLoading" class="swag-paypal-method-card__status" size="medium" appearance="pill" :variant="statusVariant" > <sw-color-badge rounded :variant="statusVariant" /> <span>{{ statusText }}</span> </sw-label> </div> </template> <template #headerRight> <div class="swag-paypal-method-card__header-right"> <mt-link type="internal" :to="{ name: 'swag.paypal.settings.index' }"> {{ $t('swag-paypal-method.settingsLink') }} </mt-link> </div> </template> <div class="swag-paypal-method-card__content"> <template v-if="merchantInformationStore.isLoading"> <sw-skeleton-bar /> <sw-skeleton-bar /> </template> <swag-paypal-method-merchant-information v-else-if="showMerchantInformation" @save="saveSettings" > {% block swag_paypal_method_card_onboarding_buttons_connected %} <swag-paypal-onboarding-button mode="live" @onboarded="saveSettings" /> <swag-paypal-onboarding-button mode="sandbox" variant="link" @onboarded="saveSettings" /> {% endblock %} </swag-paypal-method-merchant-information> <template v-else> <div class="swag-paypal-method-card__info"> {% block swag_paypal_method_card_info %} <p class="swag-paypal-method-card__header"> {{ $t('swag-paypal-method.header') }} </p> <p class="swag-paypal-method-card__description"> {{ $t('swag-paypal-method.description') }} </p> {% endblock %} </div> <div class="swag-paypal-method-card__onboarding_buttons"> {% block swag_paypal_method_card_onboarding_buttons_disconnected %} <swag-paypal-onboarding-button mode="live" @onboarded="saveSettings" /> <swag-paypal-onboarding-button mode="sandbox" variant="link" @onboarded="saveSettings" /> {% endblock %} </div> </template> {% block swag_paypal_method_card_payment_methods %} <p class="swag-paypal-method-card__payment-method-headline"> {{ $t('swag-paypal-method.paymentMethodText') }} </p> <template v-if="isLoadingPaymentMethods"> <sw-skeleton-bar /> <sw-skeleton-bar /> <sw-skeleton-bar /> </template> <div v-else class="swag-paypal-method-card__listing"> <swag-paypal-payment-method v-for="paymentMethod in paymentMethods" :key="paymentMethod.id" :payment-method="paymentMethod" @update:active="onUpdateActive(paymentMethod, $event)" /> </div> {% endblock %} </div> </mt-card>`,{Context:s}=Shopware,{Criteria:t}=Shopware.Data,i=Shopware.Component.wrapComponentConfig({template:o,inject:["repositoryFactory"],mixins:[Shopware.Mixin.getByName("notification"),Shopware.Mixin.getByName("swag-paypal-settings"),Shopware.Mixin.getByName("swag-paypal-merchant-information")],data(){return{isLoadingPaymentMethods:!0,paymentMethods:[]}},computed:{assetFilter(){return Shopware.Filter.getByName("asset")},paymentMethodRepository(){return this.repositoryFactory.create("payment_method")},paymentMethodCriteria(){return new t(1,500).addAssociation("media").addFilter(t.equals("plugin.name","SwagPayPal")).addSorting(t.sort("position","ASC"))},merchantStatus(){const a=this.merchantInformationStore.actual.merchantIntegrations;return a?this.merchantInformationStore.canPPCP?a!=null&&a.primary_email_confirmed?a!=null&&a.payments_receivable?"connected":"paymentsUnreceivable":"emailUnconfirmed":"onboardingNeeded":"notConnected"},statusVariant(){switch(this.merchantStatus){case"onboardingNeeded":case"notConnected":return"danger";case"emailUnconfirmed":case"paymentsUnreceivable":return"warning";case"connected":return"success"}},statusText(){return this.$t(`swag-paypal-method.merchantStatusText.${this.merchantStatus}`)},showMerchantInformation(){return this.merchantInformationStore.canPPCP}},created(){this.createdComponent()},methods:{createdComponent(){this.fetchPaymentMethods()},async fetchPaymentMethods(){this.isLoadingPaymentMethods=!0;const a=await this.paymentMethodRepository.search(this.paymentMethodCriteria,s.api).catch(()=>[]);this.paymentMethods=a.filter(e=>e.formattedHandlerIdentifier==="handler_swag_pospayment"?!1:!(["handler_swag_trustlyapmhandler","handler_swag_giropayapmhandler","handler_swag_sofortapmhandler"].includes(e.formattedHandlerIdentifier??"")&&!e.active)),this.isLoadingPaymentMethods=!1},async onUpdateActive(a,e){a.active=e,await this.paymentMethodRepository.save(a,s.api).then(()=>{var n;this.createNotificationSuccess({message:this.$t(`swag-paypal-method.switch.${a.active?"active":"inactive"}`,{name:((n=a.translated)==null?void 0:n.name)||a.name})})}).catch(()=>{a.active=!e})}}});export{i as default};
