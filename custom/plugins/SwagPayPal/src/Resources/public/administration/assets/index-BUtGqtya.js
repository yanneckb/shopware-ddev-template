import{a as i,I as n}from"./swag-paypal-settings.constant-7pNPSBTU.js";const l=`{% block swag_paypal_settings_live_credentials %} <mt-card class="swag-paypal-settings-live-credentials" position-identifier="swag-paypal-settings-live-credentials" :is-loading="settingsStore.isLoading" > <template #title> <swag-paypal-setting class="swag-paypal-settings-credentials__title" path="SwagPayPal.settings.sandbox" :bordered="false" :label="$t('swag-paypal-settings.credentialsLive.title')" :help-text="null" > <template #content="props"> <mt-switch :name="props.path" :disabled="props.disabled" :model-value="!props.currentValue" @update:model-value="props.updateCurrentValue(!$event)" /> </template> </swag-paypal-setting> </template> <template #headerRight> <sw-button-process :process-success="testCredentials === 'success'" :is-loading="testCredentials === 'loading'" size="small" @update:process-success="testCredentials = 'none'" @click="onTest('')" > {{ $t('swag-paypal-settings.credentialsLive.test') }} </sw-button-process> </template> <swag-paypal-setting path="SwagPayPal.settings.clientId" :disabled="settingsStore.isSandbox && !settingsStore.salesChannel" /> <swag-paypal-setting path="SwagPayPal.settings.clientSecret" :disabled="settingsStore.isSandbox && !settingsStore.salesChannel" /> <swag-paypal-setting path="SwagPayPal.settings.merchantPayerId" :disabled="settingsStore.isSandbox && !settingsStore.salesChannel" /> </mt-card> {% endblock %} {% block swag_paypal_settings_sandbox_credentials %} <mt-card class="swag-paypal-settings-sandbox-credentials" position-identifier="swag-paypal-sandbox-credentials" :is-loading="settingsStore.isLoading" > <template #title> <swag-paypal-setting class="swag-paypal-settings-credentials__title" path="SwagPayPal.settings.sandbox" :label="$t('swag-paypal-settings.credentialsSandbox.title')" :help-text="null" :bordered="false" /> </template> <template #headerRight> <sw-button-process :process-success="testCredentialsSandbox === 'success'" :is-loading="testCredentialsSandbox === 'loading'" size="small" @update:process-success="testCredentialsSandbox = 'none'" @click="onTest('Sandbox')" > {{ $t('swag-paypal-settings.credentialsSandbox.test') }} </sw-button-process> </template> <swag-paypal-setting path="SwagPayPal.settings.clientIdSandbox" :disabled="!settingsStore.isSandbox && !settingsStore.salesChannel" /> <swag-paypal-setting path="SwagPayPal.settings.clientSecretSandbox" :disabled="!settingsStore.isSandbox && !settingsStore.salesChannel" /> <swag-paypal-setting path="SwagPayPal.settings.merchantPayerIdSandbox" :disabled="!settingsStore.isSandbox && !settingsStore.salesChannel" /> </mt-card> {% endblock %} <mt-card class="swag-paypal-settings-behavior" position-identifier="swag-paypal-settings-behavior" :title="$t('swag-paypal-settings.behavior.title')" :is-loading="settingsStore.isLoading" > <swag-paypal-setting path="SwagPayPal.settings.intent" :options="intentOptions" /> <swag-paypal-setting path="SwagPayPal.settings.submitCart" /> <swag-paypal-setting path="SwagPayPal.settings.brandName" /> <swag-paypal-setting path="SwagPayPal.settings.landingPage" :options="landingPageOptions" /> <swag-paypal-setting path="SwagPayPal.settings.sendOrderNumber" /> <sw-container columns="1fr 1fr" gap="0px 30px"> <swag-paypal-setting path="SwagPayPal.settings.orderNumberPrefix" /> <swag-paypal-setting path="SwagPayPal.settings.orderNumberSuffix" /> </sw-container> <swag-paypal-setting path="SwagPayPal.settings.excludedProductIds"> <template #content="props"> <sw-entity-multi-id-select name="SwagPayPal.settings.excludedProductIds" :repository="productRepository" :criteria="excludedProductCriteria" :map-inheritance="props" :disabled="props.disabled" :value="props.currentValue" @update:value="props.updateCurrentValue" > <template #selection-label-property="{ item }"> <sw-product-variant-info :variations="item.variation" > {{ item.translated.name || item.name }} </sw-product-variant-info> </template> <template #result-label-property="{ item }"> <sw-product-variant-info :variations="item.variation" > {{ item.translated.name || item.name }} </sw-product-variant-info> </template> </sw-entity-multi-id-select> </template> </swag-paypal-setting> <swag-paypal-setting path="SwagPayPal.settings.excludedProductStreamIds"> <template #content="props"> <sw-entity-multi-id-select name="SwagPayPal.settings.excludedProductStreamIds" :repository="productStreamRepository" :map-inheritance="props" :disabled="props.disabled" :value="props.currentValue" @update:value="props.updateCurrentValue" /> </template> </swag-paypal-setting> </mt-card> <mt-card class="swag-paypal-settings-vaulting" position-identifier="swag-paypal-settings-vaulting" :title="$t('swag-paypal-settings.vaulting.title')" :is-loading="merchantInformationStore.isLoading || settingsStore.isLoading" > <div class="swag-paypal-settings-vaulting__description-title"> {{ $t('swag-paypal-settings.vaulting.descriptionTitle') }} </div> <div class="swag-paypal-settings-vaulting__description-text"> {{ $t('swag-paypal-settings.vaulting.descriptionText') }} </div> <template v-if="!merchantInformationStore.isLoading"> <swag-paypal-setting v-if="merchantInformationStore.canVault" path="SwagPayPal.settings.vaultingEnabledWallet" /> <swag-paypal-setting v-if="merchantInformationStore.canVault" path="SwagPayPal.settings.vaultingEnabledACDC" /> <swag-paypal-setting v-if="merchantInformationStore.canVault" path="SwagPayPal.settings.vaultingEnabledVenmo" /> <div v-if="!merchantInformationStore.canVault"> <swag-paypal-onboarding-button class="swag-paypal-settings-vaulting__activate-button" :mode="settingsStore.isSandbox ? 'sandbox' : 'live'" > {{ $t('swag-paypal-settings.vaulting.activeButtonLabel') }} </swag-paypal-onboarding-button> </div> </template> </mt-card> <mt-card class="swag-paypal-settings-acdc" position-identifier="swag-paypal-settings-acdc" :title="$t('swag-paypal-settings.acdc.title')" :is-loading="settingsStore.isLoading" > <swag-paypal-setting path="SwagPayPal.settings.acdcForce3DS" /> </mt-card> <mt-card class="swag-paypal-settings-pui" position-identifier="swag-paypal-settings-pui" :title="$t('swag-paypal-settings.pui.title')" :is-loading="settingsStore.isLoading" > <swag-paypal-setting path="SwagPayPal.settings.puiCustomerServiceInstructions" /> </mt-card>`,{Criteria:p}=Shopware.Data,r=Shopware.Component.wrapComponentConfig({template:l,inject:["acl","repositoryFactory","SwagPayPalSettingsService"],mixins:[Shopware.Mixin.getByName("swag-paypal-notification")],data(){return{testCredentials:"none",testCredentialsSandbox:"none"}},computed:{settingsStore(){return Shopware.Store.get("swagPayPalSettings")},merchantInformationStore(){return Shopware.Store.get("swagPayPalMerchantInformation")},intentOptions(){return n.map(t=>({value:t,label:this.$t(`swag-paypal-settings.options.intent.${t}`)}))},landingPageOptions(){return i.map(t=>({value:t,label:this.$t(`swag-paypal-settings.options.landingPage.${t}`)}))},productRepository(){return this.repositoryFactory.create("product")},productStreamRepository(){return this.repositoryFactory.create("product_stream")},excludedProductCriteria(){return new p(1,25).addAssociation("options.group")}},methods:{async onTest(t){this[`testCredentials${t}`]="loading";const a=await this.SwagPayPalSettingsService.testApiCredentials(this.settingsStore.get(`SwagPayPal.settings.clientId${t}`),this.settingsStore.get(`SwagPayPal.settings.clientSecret${t}`),this.settingsStore.get(`SwagPayPal.settings.merchantPayerId${t}`),t==="Sandbox").catch(s=>{var e;return((e=s.response)==null?void 0:e.data)??{errors:[]}});a.valid?this.createNotificationSuccess({title:this.$t("swag-paypal.notifications.test.title"),message:this.$t("swag-paypal.notifications.test.successMessage")}):a.errors&&this.createNotificationError({title:this.$t("swag-paypal.notifications.test.title"),message:this.$t("swag-paypal.notifications.test.errorMessage",{message:this.createMessageFromError(a)})}),this[`testCredentials${t}`]=a.valid?"success":"none"}}});export{r as default};
