const o=`<mt-card class="swag-paypal-settings-webhook" position-identifier="swag-paypal-settings-webhook" :is-loading="status !== 'none'" > <template #title> <div class="swag-paypal-settings-webhook__title"> <p> {{ $t('swag-paypal-settings.webhook.title') }} </p> <sw-label class="swag-paypal-settings-webhook__label" appearance="pill" size="medium" :variant="webhookStatusVariant" > <sw-color-badge :rounded="true" :variant="webhookStatusVariant" /> <span>{{ webhookStatusLabel }}</span> </sw-label> </div> </template> <div class="swag-paypal-settings-webhook__content"> <span class="swag-paypal-settings-webhook__info-text"> {{ $t('swag-paypal-settings.webhook.info') }} </span> <mt-button class="swag-paypal-settings-webhook__refresh-button" variant="secondary" :disabled="status !== 'none' || !allowRefresh || !acl.can('swag_paypal.editor')" :is-loading="status === 'refreshing'" @click="onRefreshWebhook" > {{ $t('swag-paypal-settings.webhook.buttonRefresh') }} </mt-button> </div> </mt-card>`,s="missing",a="invalid",i="valid",n=Shopware.Component.wrapComponentConfig({template:o,inject:["acl","SwagPayPalWebhookService"],mixins:[Shopware.Mixin.getByName("swag-paypal-notification")],data(){return{allWebhookStatus:{},status:"none"}},computed:{settingsStore(){return Shopware.Store.get("swagPayPalSettings")},webhookStatus(){return this.allWebhookStatus[String(this.settingsStore.salesChannel)]},webhookStatusLabel(){return this.$t(`swag-paypal-settings.webhook.status.${this.webhookStatus||"unknown"}`)},webhookStatusVariant(){switch(this.webhookStatus){case s:return"danger";case a:return"warning";case i:return"success";default:return"neutral"}},allowRefresh(){return[a,s].includes(this.webhookStatus??"")}},watch:{"settingsStore.salesChannel":{immediate:!0,handler(){this.fetchWebhookStatus(this.settingsStore.salesChannel)}}},methods:{fetchWebhookStatus(t){this.webhookStatus||(this.status="fetching",this.SwagPayPalWebhookService.status(t).then(e=>{this.allWebhookStatus[String(t)]=e.result,this.status="none"}).catch(e=>{this.createNotificationError({title:this.$t("swag-paypal.notifications.webhook.title"),message:this.$t("swag-paypal.notifications.webhook.errorMessage",{message:this.createMessageFromError(e)})})}))},async onRefreshWebhook(){this.status="refreshing",await this.SwagPayPalWebhookService.register(this.settingsStore.salesChannel).catch(t=>{this.createNotificationError({title:this.$t("swag-paypal.notifications.webhook.title"),message:this.$t("swag-paypal.notifications.webhook.errorMessage",{message:this.createMessageFromError(t)})})}),this.status="none",this.fetchWebhookStatus(this.settingsStore.salesChannel)}}});export{n as default};
