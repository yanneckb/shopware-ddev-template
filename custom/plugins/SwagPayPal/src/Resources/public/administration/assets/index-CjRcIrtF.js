const l=`<mt-card class="swag-paypal-settings-sales-channel-switch" position-identifier="swag-paypal-settings-sales-channel-switch" :title="$t('global.entities.sales_channel', 2)" > <template #headerRight> <div class="swag-paypal-settings-sales-channel-switch__header-right"> <mt-link type="internal" :to="{ name: 'sw.settings.payment.overview' }"> {{ $t('sw-settings-payment.general.mainMenuItemGeneral') }} </mt-link> </div> </template> <sw-single-select v-model:value="settingsStore.salesChannel" :is-loading="isLoading || settingsStore.isLoading" :options="salesChannels" :disabled="!acl.can('swag_paypal.editor') || isLoading || settingsStore.isLoading" /> <div class="swag-paypal-settings-sales-channel-switch__default"> <p>{{ $t('swag-paypal-settings-sales-channel-switch.description') }}</p> <sw-button-process :process-success="defaultPaymentMethods === 'success'" :is-loading="defaultPaymentMethods === 'loading'" :disabled="!acl.can('swag_paypal.editor') || isLoading" @update:process-success="defaultPaymentMethods === 'none'" @click="onSetPaymentMethodDefault" > {{ $t('swag-paypal-settings-sales-channel-switch.label') }} </sw-button-process> </div> </mt-card>`,{Defaults:s}=Shopware,{Criteria:n}=Shopware.Data,i=Shopware.Component.wrapComponentConfig({template:l,inject:["acl","repositoryFactory","SwagPaypalPaymentMethodService"],data(){return{isLoading:!0,salesChannels:[],defaultPaymentMethods:"none"}},computed:{settingsStore(){return Shopware.Store.get("swagPayPalSettings")},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},salesChannelCriteria(){const e=new n(1,500);return e.addFilter(n.equalsAny("typeId",[s.storefrontSalesChannelTypeId,s.apiSalesChannelTypeId])),e}},created(){this.createdComponent()},methods:{createdComponent(){this.fetchSalesChannels()},async fetchSalesChannels(){try{const e=await this.salesChannelRepository.search(this.salesChannelCriteria,Shopware.Context.api);this.salesChannels=[{value:null,label:this.$t("sw-sales-channel-switch.labelDefaultOption")}],e.forEach(a=>{var t;this.salesChannels.push({value:a.id,label:((t=a.translated)==null?void 0:t.name)||a.name})})}finally{this.isLoading=!1}},onSetPaymentMethodDefault(){this.defaultPaymentMethods="loading",this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel(this.settingsStore.salesChannel).then(()=>{this.defaultPaymentMethods="success"}).catch(()=>{this.defaultPaymentMethods="none"})}}});export{i as default};
