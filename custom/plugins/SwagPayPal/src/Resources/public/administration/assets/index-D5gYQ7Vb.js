import{C as e}from"./swag-paypal-settings.constant-7pNPSBTU.js";const o=`{% block swag_paypal_settings_webhook %} <swag-paypal-settings-webhook /> {% endblock %} <mt-card class="swag-paypal-settings-cross-border" position-identifier="swag-paypal-settings-cross-border" :title="$t('swag-paypal-settings.crossBorder.title')" :is-loading="settingsStore.isLoading" > <div class="swag-paypal-settings-cross-border__content"> <mt-banner class="swag-paypal-settings-cross-border__warning-text" variant="attention"> {{ $t('swag-paypal-settings.crossBorder.warning') }} </mt-banner> <span class="swag-paypal-settings-cross-border__info-text"> {{ $t('swag-paypal-settings.crossBorder.info') }} </span> <swag-paypal-setting path="SwagPayPal.settings.crossBorderMessagingEnabled" /> <swag-paypal-setting path="SwagPayPal.settings.crossBorderBuyerCountry" :options="countryOverrideOptions" /> </div> </mt-card>`,n=Shopware.Component.wrapComponentConfig({template:o,computed:{settingsStore(){return Shopware.Store.get("swagPayPalSettings")},countryOverrideOptions(){const t=e.map(s=>({value:s,label:this.$t(`locale.${s}`)})).sort((s,a)=>s.label.localeCompare(a.label));return[{value:null,label:this.$t("swag-paypal-settings.crossBorder.buyerCountryAuto")},...t]}}});export{n as default};
